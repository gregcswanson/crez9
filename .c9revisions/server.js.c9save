{"ts":1342141426770,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\r\n/**\r\n* Module dependencies.\r\n*/\r\n\r\nvar express = require('express')\r\n    , routes = require('./routes')\r\n    , Db = require('mongodb').Db\r\n    , Server = require('mongodb').Server;\r\nvar azure = require('azure');\r\nvar uuid = require('node-uuid');\r\nvar passport = require('passport')\r\n  , LocalStrategy = require('passport-local').Strategy;\r\n\r\n/* setup all cron jobs */\r\nvar cronJob = require('cron').CronJob;\r\nnew cronJob('*/10 * * * * *', function() {\r\n    var d = new Date();\r\n    //console.log(uuid.v1());\r\n    //console.log('this background task started: ' + d.toString());\r\n}, null, true, null);\r\n\r\n/* configure authentication */\r\npassport.use(new LocalStrategy(\r\n  function(username, password, done) {\r\n      console.log('authenticate (' + username + ', ' + password + ')');\r\n      webUser.find(username, function(err, user) {\r\n          if(err) { return done(err); }\r\n          if(!user) {\r\n              console.log('authenticate ' + username + ', not found');\r\n              return done(null, false, { message: 'Unknown user' });\r\n          }\r\n          if(user.password != user.password) {\r\n              console.log('authenticate ' + username + ', invalid password');\r\n              return done(null, false, { message: 'Invalid password' });\r\n          }\r\n          console.log('authenticated');\r\n          return done(null, user);\r\n      });\r\n  }\r\n));\r\n\r\npassport.serializeUser(function(user, done) {\r\n    done(null, user.username);\r\n});\r\n\r\npassport.deserializeUser(function(id, done) {\r\n    webUser.find(id, function(err, user) {\r\n        done(err, user);\r\n    });\r\n});\r\n\r\n/* configure mongoDB \r\nvar db = new Db('cloud', new Server('flame.mongohq.com', 27106, {}), {auto_reconnect: true});\r\ndb.open(function(err) {\r\n    console.log('authenticating');\r\n    db.authenticate(\r\n        'test',\r\n        'test123',\r\n        function(err) {\r\n            if(err) {\r\n                console.log(err);\r\n            } else {\r\n                console.log('db ready');\r\n            }\r\n        }\r\n    );\r\n});*/\r\n\r\n/* configure azure */\r\nvar tableName = 'categories'\r\n  , partitionKey = 'all'\r\n  , accountName = 'creznode'\r\n  , accountKey = '8QLySuGtMGNOmB8zI+SAfuHVSb5hKWXTqALCe3YPz0iBEaxlbOyHY7O2CpsZqXVwzMoO4WRe43FB0y24L+RIvA==';\r\n\r\n/* setup models */\r\nvar WebUser = require('./models/webuser.js');\r\nvar webUser = new WebUser();\r\n\r\n/* setup the controllers */\r\nvar CategoryController = require('./controllers/categorycontroller.js');\r\nvar Category = require('./models/category.js');\r\nvar category = new Category(\r\n    azure.createTableService(accountName, accountKey)\r\n    , tableName\r\n    , partitionKey);\r\nvar CategoryMongoDB = require('./models/categoryMongoDB.js');\r\n//var categoryMongoDB = new CategoryMongoDB(db);\r\nvar categoryController = new CategoryController(category); // Azure Table Storage\r\n//var categoryController = new CategoryController(categoryMongoDB); // MongoDB Storage\r\n\r\n\r\nvar HomeController = require('./controllers/homecontroller.js');\r\nvar homeController = new HomeController();\r\n\r\n/* start the web server */\r\nvar app = module.exports = express.createServer();\r\n\r\n// Configuration\r\n\r\napp.configure(function() {\r\n    app.set('views', __dirname + '/views');\r\n    app.set('view engine', 'ejs');\r\n    app.register(\".html\", require(\"ejs\")); // Register EJS to process the server html\r\n    app.set('view options', {\r\n        open: '{{',\r\n        close: '}}'\r\n    }); // Change the open and close tags, no real reason\r\n    app.use(express.bodyParser());\r\n    app.use(express.methodOverride());\r\n    app.use(express.cookieParser());\r\n    app.use(express.session({ secret: 'CrezwellInVegas2012' }));\r\n    app.use(passport.initialize());\r\n    app.use(passport.session());\r\n    app.dynamicHelpers({ messages: require('./helpers/flash-messages.js') });\r\n    app.use(app.router);\r\n    app.use(express.static(__dirname + '/public'));\r\n});\r\n\r\napp.configure('development', function() {\r\n    app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));\r\n});\r\n\r\napp.configure('production', function() {\r\n    app.use(express.errorHandler());\r\n});\r\n\r\n// Routes\r\napp.get('/login', function(req, res) { res.render('login.html', { layout: false, title: 'Login' }); });\r\napp.post('/login',\r\n    passport.authenticate('local', {\r\n        successRedirect: '/',\r\n        failureRedirect: '/login',\r\n        failureFlash: 'Invalid credentials'\r\n    })\r\n);\r\n    app.get('/logout', ensureAuthenticated, function(req, res) {\r\n        req.logOut();\r\n        res.redirect('/');\r\n    });\r\n\r\n    app.get('/', function(req, res) {\r\n        //req.flash(\"info\", \"herp derp\")\r\n        //req.flash(\"success\", \"herp derp\")\r\n        //req.flash(\"secondary\", \"herp derp\")\r\n        //req.flash(\"alert\", \"herp derp\")\r\n        if(req.isAuthenticated()) {\r\n            homeController.index(req, res);\r\n        } else {\r\n            res.redirect('/login');\r\n        }\r\n    }\r\n    // homeController.index.bind(homeController));\r\n);\r\napp.get('/category', ensureAuthenticated, categoryController.showCategories.bind(categoryController));\r\napp.get('/category/add', ensureAuthenticated, categoryController.addCategory.bind(categoryController));\r\napp.post('/category/add', ensureAuthenticated, categoryController.saveNewCategory.bind(categoryController));\r\napp.get('/category/edit/:id', ensureAuthenticated, categoryController.editCategory.bind(categoryController));\r\napp.post('/category/edit/:id', ensureAuthenticated, categoryController.saveEditCategory.bind(categoryController));\r\napp.get('/category/delete/:id', ensureAuthenticated, categoryController.deleteCategory.bind(categoryController));\r\napp.post('/category/delete/:id', ensureAuthenticated, categoryController.saveDeleteCategory.bind(categoryController));\r\n\r\n// Simple route middleware to ensure user is authenticated.\r\n//   Use this route middleware on any resource that needs to be protected.  If\r\n//   the request is authenticated (typically via a persistent login session),\r\n//   the request will proceed.  Otherwise, the user will be redirected to the\r\n//   login page.\r\nfunction ensureAuthenticated(req, res, next) {\r\n  if (req.isAuthenticated()) { return next(); }\r\n  res.redirect('/login')\r\n}\r\n\r\napp.listen(process.env.port || 3000);\r\nconsole.log(\"Express server listening on port %d in %s mode\", app.address().port, app.settings.env);\r\n"]],"start1":0,"start2":0,"length1":0,"length2":6295}]],"length":6295}
{"contributors":[],"silentsave":false,"ts":1342141527277,"patch":[[{"diffs":[[0,"category"],[-1,"c"],[1,"C"],[0,"ontrolle"]],"start1":2412,"start2":2412,"length1":17,"length2":17}]],"length":6295,"saved":false}
{"ts":1342141553259,"patch":[[{"diffs":[[0,"ers/home"],[-1,"c"],[1,"C"],[0,"ontrolle"]],"start1":2939,"start2":2939,"length1":17,"length2":17}]],"length":6295,"saved":false}
